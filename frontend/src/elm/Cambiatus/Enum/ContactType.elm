-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Cambiatus.Enum.ContactType exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-|

  - Email - Email, must be a valid address
  - Instagram - An Instagram account. Must have full URL like <https://instagram.com/${username}>
  - Link - Links Any URL
  - Phone - A regular phone number
  - Telegram - An username or phone number for Telegram. Must be <https://t.me/${username}> or <https://telegram.org/${username}>
  - Whatsapp - A phone number used in Whatsapp. Regular international phone number

-}
type ContactType
    = Email
    | Instagram
    | Link
    | Phone
    | Telegram
    | Whatsapp


list : List ContactType
list =
    [ Email, Instagram, Link, Phone, Telegram, Whatsapp ]


decoder : Decoder ContactType
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "EMAIL" ->
                        Decode.succeed Email

                    "INSTAGRAM" ->
                        Decode.succeed Instagram

                    "LINK" ->
                        Decode.succeed Link

                    "PHONE" ->
                        Decode.succeed Phone

                    "TELEGRAM" ->
                        Decode.succeed Telegram

                    "WHATSAPP" ->
                        Decode.succeed Whatsapp

                    _ ->
                        Decode.fail ("Invalid ContactType type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : ContactType -> String
toString enum =
    case enum of
        Email ->
            "EMAIL"

        Instagram ->
            "INSTAGRAM"

        Link ->
            "LINK"

        Phone ->
            "PHONE"

        Telegram ->
            "TELEGRAM"

        Whatsapp ->
            "WHATSAPP"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe ContactType
fromString enumString =
    case enumString of
        "EMAIL" ->
            Just Email

        "INSTAGRAM" ->
            Just Instagram

        "LINK" ->
            Just Link

        "PHONE" ->
            Just Phone

        "TELEGRAM" ->
            Just Telegram

        "WHATSAPP" ->
            Just Whatsapp

        _ ->
            Nothing
