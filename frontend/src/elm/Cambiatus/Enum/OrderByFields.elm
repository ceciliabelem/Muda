-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Cambiatus.Enum.OrderByFields exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-|

  - Account - Order by member account
  - Created\_at - Order by member creation date
  - Name - Order by member name

-}
type OrderByFields
    = Account
    | Created_at
    | Name


list : List OrderByFields
list =
    [ Account, Created_at, Name ]


decoder : Decoder OrderByFields
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "account" ->
                        Decode.succeed Account

                    "created_at" ->
                        Decode.succeed Created_at

                    "name" ->
                        Decode.succeed Name

                    _ ->
                        Decode.fail ("Invalid OrderByFields type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : OrderByFields -> String
toString enum =
    case enum of
        Account ->
            "account"

        Created_at ->
            "created_at"

        Name ->
            "name"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe OrderByFields
fromString enumString =
    case enumString of
        "account" ->
            Just Account

        "created_at" ->
            Just Created_at

        "name" ->
            Just Name

        _ ->
            Nothing
