-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Cambiatus.Enum.ReactionEnum exposing (..)

import Json.Decode as Decode exposing (Decoder)


type ReactionEnum
    = ClappingHands
    | FaceWithRaisedEyebrow
    | GrinningFaceWithBigEyes
    | PartyPopper
    | RedHeart
    | Rocket
    | SlightlyFrowningFace
    | SmilingFaceWithHeartEyes
    | ThumbsDown
    | ThumbsUp


list : List ReactionEnum
list =
    [ ClappingHands, FaceWithRaisedEyebrow, GrinningFaceWithBigEyes, PartyPopper, RedHeart, Rocket, SlightlyFrowningFace, SmilingFaceWithHeartEyes, ThumbsDown, ThumbsUp ]


decoder : Decoder ReactionEnum
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "CLAPPING_HANDS" ->
                        Decode.succeed ClappingHands

                    "FACE_WITH_RAISED_EYEBROW" ->
                        Decode.succeed FaceWithRaisedEyebrow

                    "GRINNING_FACE_WITH_BIG_EYES" ->
                        Decode.succeed GrinningFaceWithBigEyes

                    "PARTY_POPPER" ->
                        Decode.succeed PartyPopper

                    "RED_HEART" ->
                        Decode.succeed RedHeart

                    "ROCKET" ->
                        Decode.succeed Rocket

                    "SLIGHTLY_FROWNING_FACE" ->
                        Decode.succeed SlightlyFrowningFace

                    "SMILING_FACE_WITH_HEART_EYES" ->
                        Decode.succeed SmilingFaceWithHeartEyes

                    "THUMBS_DOWN" ->
                        Decode.succeed ThumbsDown

                    "THUMBS_UP" ->
                        Decode.succeed ThumbsUp

                    _ ->
                        Decode.fail ("Invalid ReactionEnum type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : ReactionEnum -> String
toString enum =
    case enum of
        ClappingHands ->
            "CLAPPING_HANDS"

        FaceWithRaisedEyebrow ->
            "FACE_WITH_RAISED_EYEBROW"

        GrinningFaceWithBigEyes ->
            "GRINNING_FACE_WITH_BIG_EYES"

        PartyPopper ->
            "PARTY_POPPER"

        RedHeart ->
            "RED_HEART"

        Rocket ->
            "ROCKET"

        SlightlyFrowningFace ->
            "SLIGHTLY_FROWNING_FACE"

        SmilingFaceWithHeartEyes ->
            "SMILING_FACE_WITH_HEART_EYES"

        ThumbsDown ->
            "THUMBS_DOWN"

        ThumbsUp ->
            "THUMBS_UP"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe ReactionEnum
fromString enumString =
    case enumString of
        "CLAPPING_HANDS" ->
            Just ClappingHands

        "FACE_WITH_RAISED_EYEBROW" ->
            Just FaceWithRaisedEyebrow

        "GRINNING_FACE_WITH_BIG_EYES" ->
            Just GrinningFaceWithBigEyes

        "PARTY_POPPER" ->
            Just PartyPopper

        "RED_HEART" ->
            Just RedHeart

        "ROCKET" ->
            Just Rocket

        "SLIGHTLY_FROWNING_FACE" ->
            Just SlightlyFrowningFace

        "SMILING_FACE_WITH_HEART_EYES" ->
            Just SmilingFaceWithHeartEyes

        "THUMBS_DOWN" ->
            Just ThumbsDown

        "THUMBS_UP" ->
            Just ThumbsUp

        _ ->
            Nothing
