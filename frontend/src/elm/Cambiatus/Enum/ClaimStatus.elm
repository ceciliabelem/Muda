-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Cambiatus.Enum.ClaimStatus exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| Claim possible status
-}
type ClaimStatus
    = Approved
    | Pending
    | Rejected


list : List ClaimStatus
list =
    [ Approved, Pending, Rejected ]


decoder : Decoder ClaimStatus
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "APPROVED" ->
                        Decode.succeed Approved

                    "PENDING" ->
                        Decode.succeed Pending

                    "REJECTED" ->
                        Decode.succeed Rejected

                    _ ->
                        Decode.fail ("Invalid ClaimStatus type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : ClaimStatus -> String
toString enum =
    case enum of
        Approved ->
            "APPROVED"

        Pending ->
            "PENDING"

        Rejected ->
            "REJECTED"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe ClaimStatus
fromString enumString =
    case enumString of
        "APPROVED" ->
            Just Approved

        "PENDING" ->
            Just Pending

        "REJECTED" ->
            Just Rejected

        _ ->
            Nothing
