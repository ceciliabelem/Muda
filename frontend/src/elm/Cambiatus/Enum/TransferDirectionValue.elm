-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Cambiatus.Enum.TransferDirectionValue exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| The direction of the transfer

  - Receiving - User's received transfers.
  - Sending - User's sent transfers.

-}
type TransferDirectionValue
    = Receiving
    | Sending


list : List TransferDirectionValue
list =
    [ Receiving, Sending ]


decoder : Decoder TransferDirectionValue
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "RECEIVING" ->
                        Decode.succeed Receiving

                    "SENDING" ->
                        Decode.succeed Sending

                    _ ->
                        Decode.fail ("Invalid TransferDirectionValue type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : TransferDirectionValue -> String
toString enum =
    case enum of
        Receiving ->
            "RECEIVING"

        Sending ->
            "SENDING"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe TransferDirectionValue
fromString enumString =
    case enumString of
        "RECEIVING" ->
            Just Receiving

        "SENDING" ->
            Just Sending

        _ ->
            Nothing
