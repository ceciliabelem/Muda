-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Cambiatus.Enum.Permission exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| Permissions a role can have

  - Award - Role permission that allows to award rewards on community actions
  - Claim - Role permission that allows to claim actions
  - Invite - Role permission that allows to create invitations to the community
  - Order - Role permission that allows to create orders to buy from the shop
  - Sell - Role permission that allows to sell products and services in the community
  - Transfer - Role permission that allows users to transfer tokens on their community
  - Verify - Role permission that allows to verify claims

-}
type Permission
    = Award
    | Claim
    | Invite
    | Order
    | Sell
    | Transfer
    | Verify


list : List Permission
list =
    [ Award, Claim, Invite, Order, Sell, Transfer, Verify ]


decoder : Decoder Permission
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "AWARD" ->
                        Decode.succeed Award

                    "CLAIM" ->
                        Decode.succeed Claim

                    "INVITE" ->
                        Decode.succeed Invite

                    "ORDER" ->
                        Decode.succeed Order

                    "SELL" ->
                        Decode.succeed Sell

                    "TRANSFER" ->
                        Decode.succeed Transfer

                    "VERIFY" ->
                        Decode.succeed Verify

                    _ ->
                        Decode.fail ("Invalid Permission type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : Permission -> String
toString enum =
    case enum of
        Award ->
            "AWARD"

        Claim ->
            "CLAIM"

        Invite ->
            "INVITE"

        Order ->
            "ORDER"

        Sell ->
            "SELL"

        Transfer ->
            "TRANSFER"

        Verify ->
            "VERIFY"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Permission
fromString enumString =
    case enumString of
        "AWARD" ->
            Just Award

        "CLAIM" ->
            Just Claim

        "INVITE" ->
            Just Invite

        "ORDER" ->
            Just Order

        "SELL" ->
            Just Sell

        "TRANSFER" ->
            Just Transfer

        "VERIFY" ->
            Just Verify

        _ ->
            Nothing
